-- Semantic Talent Finder - Production Database Schema\n-- Generated from LinkedIn dataset analysis\n-- Optimized for vector similarity search and AI-powered matching\n\n-- Enable required PostgreSQL extensions\nCREATE EXTENSION IF NOT EXISTS vector;\nCREATE EXTENSION IF NOT EXISTS pg_trgm;\nCREATE EXTENSION IF NOT EXISTS btree_gin;\n\n-- Main profiles table with semantic search optimization\nCREATE TABLE profiles (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    \n    -- Core Identity Fields (High Quality - Low Null %)\n    full_name VARCHAR(500) NOT NULL,\n    first_name VARCHAR(100) NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    linkedin_url VARCHAR(500) NOT NULL,\n    linkedin_username VARCHAR(100) NOT NULL,\n    \n    -- Professional Information\n    job_title VARCHAR(300),\n    industry VARCHAR(200),\n    company_name VARCHAR(300),\n    company_industry VARCHAR(200),\n    \n    -- Geographic Information (Hierarchical)\n    location VARCHAR(500) NOT NULL, -- Primary location string\n    \n    -- Skills and Expertise (Optimized for Search)\n    skills TEXT[], -- Array of skills for efficient querying\n    skills_text TEXT, -- Concatenated skills for full-text search\n    technical_skills TEXT[], -- Technical skills subset\n    soft_skills TEXT[], -- Soft skills subset\n    \n    -- Experience and Seniority\n    years_experience INTEGER, -- Calculated years of experience\n    experience_level VARCHAR(50), -- entry, mid, senior, management, executive\n    seniority_score INTEGER, -- Computed seniority score (0-100)\n    \n    -- Computed Text Fields for Semantic Search\n    headline VARCHAR(500), -- Professional headline/summary\n    professional_summary TEXT, -- Combined professional description\n    searchable_content TEXT, -- Optimized content for embedding generation\n    \n    -- Contact Information (Optional)\n    email VARCHAR(320), -- RFC 5322 compliant length\n    phone VARCHAR(50),\n    mobile VARCHAR(50),\n    \n    -- Social Media\n    facebook_url VARCHAR(500),\n    twitter_url VARCHAR(500),\n    \n    -- Company Details\n    company_website VARCHAR(500),\n    company_size VARCHAR(100),\n    company_founded VARCHAR(20),\n    \n    -- AI/ML Fields\n    embedding vector(1536) NOT NULL, -- OpenAI text-embedding-3-small\n    embedding_version VARCHAR(20) DEFAULT 'v1.0', -- Track embedding model version\n    content_hash VARCHAR(64), -- SHA-256 hash for detecting changes\n    \n    -- Metadata\n    data_source VARCHAR(100) DEFAULT 'linkedin',\n    data_quality_score DECIMAL(3,2), -- 0.00 to 1.00\n    last_profile_update TIMESTAMP,\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Vector Similarity Index (HNSW for fast approximate search)\nCREATE INDEX profiles_embedding_hnsw_idx ON profiles USING hnsw (embedding vector_cosine_ops)\n    WITH (m = 16, ef_construction = 64);\n\n-- Core Identity Indexes\nCREATE UNIQUE INDEX profiles_linkedin_username_idx ON profiles(linkedin_username);\nCREATE INDEX profiles_full_name_idx ON profiles(full_name);\nCREATE INDEX profiles_name_trgm_idx ON profiles USING gin (full_name gin_trgm_ops);\n\n-- Professional Search Indexes\nCREATE INDEX profiles_job_title_idx ON profiles(job_title);\nCREATE INDEX profiles_industry_idx ON profiles(industry);\nCREATE INDEX profiles_company_idx ON profiles(company_name);\nCREATE INDEX profiles_experience_level_idx ON profiles(experience_level);\n\n-- Geographic Search Indexes\nCREATE INDEX profiles_location_idx ON profiles(location);\nCREATE INDEX profiles_region_idx ON profiles(region);\nCREATE INDEX profiles_country_idx ON profiles(country);\nCREATE INDEX profiles_geo_hierarchy_idx ON profiles(country, region, locality);\n\n-- Skills Search Indexes\nCREATE INDEX profiles_skills_gin_idx ON profiles USING gin (skills);\nCREATE INDEX profiles_technical_skills_gin_idx ON profiles USING gin (technical_skills);\nCREATE INDEX profiles_skills_text_trgm_idx ON profiles USING gin (skills_text gin_trgm_ops);\n\n-- Full-Text Search Index\nCREATE INDEX profiles_searchable_content_fts_idx ON profiles USING gin (to_tsvector('english', searchable_content));\n\n-- Performance Indexes\nCREATE INDEX profiles_quality_score_idx ON profiles(data_quality_score) WHERE data_quality_score >= 0.7;\nCREATE INDEX profiles_updated_at_idx ON profiles(updated_at);\nCREATE INDEX profiles_compound_search_idx ON profiles(industry, experience_level, country) WHERE data_quality_score >= 0.7;\n\n-- Skills lookup table for standardization\nCREATE TABLE skills_dictionary (\n    id SERIAL PRIMARY KEY,\n    skill_name VARCHAR(200) NOT NULL UNIQUE,\n    skill_category VARCHAR(100), -- technical, soft, industry\n    skill_type VARCHAR(50), -- programming, framework, tool, etc.\n    synonyms TEXT[], -- Alternative names\n    popularity_score INTEGER DEFAULT 0,\n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE INDEX skills_dictionary_name_idx ON skills_dictionary(skill_name);\nCREATE INDEX skills_dictionary_category_idx ON skills_dictionary(skill_category);\n\n-- Search analytics table\nCREATE TABLE search_queries (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    query_text TEXT NOT NULL,\n    query_embedding vector(1536),\n    user_session VARCHAR(100),\n    results_count INTEGER,\n    execution_time_ms INTEGER,\n    filters_applied JSONB,\n    created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\nCREATE INDEX search_queries_created_at_idx ON search_queries(created_at);\nCREATE INDEX search_queries_embedding_idx ON search_queries USING hnsw (query_embedding vector_cosine_ops);